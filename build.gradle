/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

buildscript {
	ext {
		springBootVersion = '2.1.7.RELEASE'
		kotlinVersion = '1.4.0'
	}
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		// kotlin에서 클래스는 기본 final이기 때문에 JPA에서 지연로딩시 entity를 상속받아 처리하는 proxy를 이용할 수 없다.
		// 즉, 지연로딩을 할 수 없다. 이를 해결해주는 컴파일러 플러그인이다. 모든 entity를 open시켜준다.
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		// JPA entity들은 기본적으로 기본생성자가 필요하다. 하지만 주 생성자가 존재하면 기본생성자가 없다.
		// @Entity가 붙은 클래스들에 한해서 자동으로 인자없는 생성자를 추가해준다.
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
	}
}

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.4.0'

}
allprojects{
	apply plugin: 'java'
	apply plugin : 'org.springframework.boot'
	apply plugin : 'io.spring.dependency-management'

	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	apply plugin: 'kotlin-jpa'
	apply plugin: "kotlin-allopen"

	group 'org.jinhanchoi'
	version '1.0-SNAPSHOT'
	sourceCompatibility = 1.8

	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
		testCompile group: 'junit', name: 'junit', version: '4.12'
	}

	compileKotlin {
		kotlinOptions.jvmTarget = "1.8"
	}
	compileTestKotlin {
		kotlinOptions.jvmTarget = "1.8"
	}
}

subprojects{




}
